knitr::opts_chunk$set(echo = TRUE)
# install.packages("tidyverse")
# install.packages("writexl")
library(tidyverse)
library(readxl)
library(janitor) # Specify a row to be the column names
#library(writexl)
rm(list = ls()) # remove all existing variables
DataFormation = function(file_path){
data = read_excel(file_path)
# Remove column 2 since it doesn't contain any values
data[,2] = NULL
# The name of the flow is stored in the second row of column ...3
Flow = data$...3[2]
# The name of the country is stored in the fourth row of column ...3
Country = data$...3[4]
# Filter rows to only keep product and year information
data = data %>%
filter(...1 %in% c("Product", 1960:2013))
# Replace ".." values with NA
data[data == ".."] = NA
# Rename the original columns and add two more columns - country and flow
data = data %>%
row_to_names(row_number = 1) %>%
rename(year = Product) %>%
mutate(country = Country, flow = Flow)
# Start gathering (pivoting data longer)
structured_data = data %>%
gather(key = "product",
value = "value",
-c("country", "year", "flow")) %>%
arrange(year) %>%
select(country, year, flow, product, value)   # Reorder the order of columns
structured_data$value = as.numeric(structured_data$value)
return(structured_data)
}
FINAL_structural_data = data.frame()  # Create an empty dataframe
all_country_directories = list.files("group_assignment/")
for (country in all_country_directories){
all_files = list.files(paste0("group_assignment/", country, "/"))
for (file in all_files){
file = paste0("group_assignment/", country, "/", file)
FINAL_structural_data = rbind(FINAL_structural_data, DataFormation(file))
}
}
# Check if the structure is the same as the assignment description
head(FINAL_structural_data %>% filter(country == "Germany", flow == "Production"), 10)
head(FINAL_structural_data %>% filter(country == "Germany", flow == "Production"), 10)
# Get total number of missing values for each country and each product across years
a = aggregate(value ~ country + product, data=FINAL_structural_data, function(x) {sum(is.na(x))}, na.action = NULL)
# Get total number of records for each country and each product across years
b = FINAL_structural_data %>%
group_by(country, product) %>%
summarise(n = n())
# Inner join the two data frame above to check if the number of records equals to the number of missing values under the same country and the same product
c = merge(a, b, by = c("product", "country"), all = T)
# If number of missing value equals to number of records, then all records for a particular product in this country are missing (across years and flows)
d = c[which(c$value == c$n), c("country", "product")]
# Remove records if there is no non-NA value across the whole period and flows for each product and each country
FINAL_DATA_NA_REMOVE = FINAL_structural_data
for (i in 1:nrow(d)){
FINAL_DATA_NA_REMOVE = FINAL_DATA_NA_REMOVE %>%
filter(country != d[i,1] | product != d[i,2])
}
summarise(FINAL_DATA_NA_REMOVE, Dataset = "Extended Energy Balances", TotalNumberOfRows = n())
summarise(FINAL_DATA_NA_REMOVE, Dataset = "Extended Energy Balances", TotalNumberOfRows = n())
FINAL_DATA_NA_REMOVE %>%
group_by(Product = product) %>%
summarise(NumberOfRows = n())
View(FINAL_structural_data)
View(FINAL_DATA_NA_REMOVE)
FINAL_DATA_NA_REMOVE[is.na(FINAL_DATA_NA_REMOVE)] = 0
summarise(FINAL_DATA_NA_REMOVE, Dataset = "Extended Energy Balances", TotalNumberOfRows = n())
FINAL_DATA_NA_REMOVE %>%
group_by(Product = product) %>%
summarise(NumberOfRows = n())
shiny::runApp('D:/Warwick/Courses/Term 1/Data Management/Group Assignment/PartD/Demo')
# Data preparation
data = readRDS("final_result.rds")
data$Longitude = as.numeric(data$Longitude)
data$Latitude = as.numeric(data$Latitude)
# Change encoding to utf-8
Encoding(data$LocalAuthorityName) = "UTF-8"
Encoding(data$AddressLine) = "UTF-8"
# Data preparation
data = readRDS("D:\\Warwick\\Courses\\Term 1\\Data Management\\Group Assignment\\PartD\\Demo\\final_result.rds")
data$Longitude = as.numeric(data$Longitude)
data$Latitude = as.numeric(data$Latitude)
# Change encoding to utf-8
Encoding(data$LocalAuthorityName) = "UTF-8"
Encoding(data$AddressLine) = "UTF-8"
runApp('D:/Warwick/Courses/Term 1/Data Management/Group Assignment/PartD/Demo')
knitr::opts_chunk$set(echo = TRUE)
# install.packages("tidyverse")
# install.packages("writexl")
library(tidyverse)
library(readxl)
library(janitor) # Specify a row to be the column names
#library(writexl)
rm(list = ls()) # remove all existing variables
FINAL_structural_data = data.frame()  # Create an empty dataframe
all_country_directories = list.files("group_assignment/")
for (country in all_country_directories){
all_files = list.files(paste0("group_assignment/", country, "/"))
for (file in all_files){
file = paste0("group_assignment/", country, "/", file)
FINAL_structural_data = rbind(FINAL_structural_data, DataFormation(file))
}
}
DataFormation = function(file_path){
data = read_excel(file_path)
# Remove column 2 since it doesn't contain any values
data[,2] = NULL
# The name of the flow is stored in the second row of column ...3
Flow = data$...3[2]
# The name of the country is stored in the fourth row of column ...3
Country = data$...3[4]
# Filter rows to only keep product and year information
data = data %>%
filter(...1 %in% c("Product", 1960:2013))
# Replace ".." values with NA
data[data == ".."] = NA
# Rename the original columns and add two more columns - country and flow
data = data %>%
row_to_names(row_number = 1) %>%
rename(year = Product) %>%
mutate(country = Country, flow = Flow)
# Start gathering (pivoting data longer)
structured_data = data %>%
gather(key = "product",
value = "value",
-c("country", "year", "flow")) %>%
arrange(year) %>%
select(country, year, flow, product, value)   # Reorder the order of columns
structured_data$value = as.numeric(structured_data$value)
return(structured_data)
}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# install.packages("tidyverse")
# install.packages("writexl")
library(tidyverse)
library(readxl)
library(janitor) # Specify a row to be the column names
#library(writexl)
rm(list = ls()) # remove all existing variables
shiny::runApp('D:/Warwick/Courses/Term 1/Data Management/Group Assignment/PartD/Demo')
# Data preparation
data = readRDS("D:\\Warwick\\Courses\\Term 1\\Data Management\\Group Assignment\\PartD\\Demo\\final_result.rds")
data$Longitude = as.numeric(data$Longitude)
data$Latitude = as.numeric(data$Latitude)
# Change encoding to utf-8
Encoding(data$LocalAuthorityName) = "UTF-8"
Encoding(data$AddressLine) = "UTF-8"
runApp('D:/Warwick/Courses/Term 1/Data Management/Group Assignment/PartD/Demo')
# Data preparation
data = readRDS("D:\\Warwick\\Courses\\Term 1\\Data Management\\Group Assignment\\PartD\\Demo\\final_result.rds")
data$Longitude = as.numeric(data$Longitude)
data$Latitude = as.numeric(data$Latitude)
# Change encoding to utf-8
Encoding(data$LocalAuthorityName) = "UTF-8"
Encoding(data$AddressLine) = "UTF-8"
# Data preparation
data = readRDS("D:\\Warwick\\Courses\\Term 1\\Data Management\\Group Assignment\\PartD\\Demo\\final_result.rds")
ggplot(data, aes(x = BusinessType)) +
geom_bar(aes(y = (..count..)/sum(..count..)))
ggplot(data, aes(x = BusinessType)) +
geom_bar() +
geom_text(aes(y = (..count..)/sum(..count..)))
ggplot(data, aes(x = BusinessType)) +
geom_bar() +
geom_text(labels = (y = (..count..)/sum(..count..)))
ggplot(data = data%>% filter(LocalAuthorityName == "Aberdeen City"), aes(x = BusinessType, fill = BusinessType)) +
geom_bar()
View(data)
plot(c(1:2), c(2:3))
