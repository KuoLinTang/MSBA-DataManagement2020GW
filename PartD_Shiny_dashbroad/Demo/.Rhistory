geom_label(x = Share) +
ggtitle(paste0("Overall Business Type distribution")) +
# scale_fill_brewer("Blues") +
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(size=22, face="bold"),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10)
) +
theme(axis.text.x=element_blank())
runApp()
ggplot(data = data_full_bar, aes(x = reorder(BusinessType, Count), y = Count, fill = Count)) +
geom_bar(stat = "identity") + coord_flip() +
scale_fill_gradient(low = "grey", high = "navy") +
labs(x = "Total Number", y = "Business Type") +
geom_text(aes(label = Share))+
ggtitle(paste0("Overall Business Type distribution")) +
# scale_fill_brewer("Blues") +
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(size=22, face="bold"),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10)
) +
theme(axis.text.x=element_blank())
ggplot(data = data_full_bar, aes(x = reorder(BusinessType, Count), y = Count, fill = Count)) +
geom_bar(stat = "identity") + coord_flip() +
scale_fill_gradient(low = "grey", high = "navy") +
labs(x = "Total Number", y = "Business Type") +
geom_text(aes(label = Share, hjust = 1))+
ggtitle(paste0("Overall Business Type distribution")) +
# scale_fill_brewer("Blues") +
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(size=22, face="bold"),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10)
) +
theme(axis.text.x=element_blank())
ggplot(data = data_full_bar, aes(x = reorder(BusinessType, Count), y = Count, fill = Count)) +
geom_bar(stat = "identity") + coord_flip() +
scale_fill_gradient(low = "grey", high = "navy") +
labs(x = "Total Number", y = "Business Type") +
geom_text(aes(label = Share, hjust = -1, size = 4))+
ggtitle(paste0("Overall Business Type distribution")) +
# scale_fill_brewer("Blues") +
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(size=22, face="bold"),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10)
) +
theme(axis.text.x=element_blank())
ggplot(data = data_full_bar, aes(x = reorder(BusinessType, Count), y = Count, fill = Count)) +
geom_bar(stat = "identity") + coord_flip() +
scale_fill_gradient(low = "grey", high = "navy") +
labs(x = "Total Number", y = "Business Type") +
geom_text(aes(label = Share, hjust = -0.5, size = 2))+
ggtitle(paste0("Overall Business Type distribution")) +
# scale_fill_brewer("Blues") +
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(size=22, face="bold"),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10)
) +
theme(axis.text.x=element_blank())
ggplot(data = data_full_bar, aes(x = reorder(BusinessType, Count), y = Count, fill = Count)) +
geom_bar(stat = "identity") + coord_flip() +
scale_fill_gradient(low = "grey", high = "navy") +
labs(x = "Total Number", y = "Business Type") +
geom_text(aes(label = Share, hjust = -0.5, size = 1))+
ggtitle(paste0("Overall Business Type distribution")) +
# scale_fill_brewer("Blues") +
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(size=22, face="bold"),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10)
) +
theme(axis.text.x=element_blank())
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(shinydashboard)
library(DT)
library(ggplot2)
library(plotly)
library(leaflet)
library(tidyverse)
# Read rds file
data = readRDS("final_result.rds")
# Convert data into a proper type
data$Longitude = as.numeric(data$Longitude)
data$Latitude = as.numeric(data$Latitude)
# Change encoding to utf-8
# stringi::stri_enc_mark(data[, 12])
Encoding(data$LocalAuthorityName) = "UTF-8"
Encoding(data$AddressLine) = "UTF-8"
# Add a back to home tag and a hyperlink connected to the data source
dbHeader = dashboardHeader(title="UK Food Hygiene",
tags$li(a(onclick = "openTab('HygieneMap')",
icon("home"),
title = "Back to Home",
style = "cursor: pointer;"),
class = "dropdown",
tags$script(HTML("
var openTab = function(tabName){
$('a', $('.sidebar')).each(function() {
if(this.getAttribute('data-value') == tabName) {
this.click()};});}"))),
tags$li(a(href = 'https://www.food.gov.uk/',
icon("utensils"),
title = "Food Hygiene Home"),
class = "dropdown"))
ui = dashboardPage(
dbHeader,
# Define sidebar content
dashboardSidebar(
sidebarMenu(
menuItem("Food Map", tabName = "HygieneMap", icon = icon("map-marked-alt")),
menuItem("Plots", tabName = "plotdashboard", icon = icon("th")),
menuItem("Controls", tabName = "Hygieneplotswithcontrols", icon = icon("filter")),
menuItem("Data", tabName = "Hygienedata", icon = icon("dashboard"))
)),
dashboardBody(
tabItems(
# First tab content
tabItem(tabName = "HygieneMap",
fluidRow(h1(style = "font-family:Times New Roman;padding-left:16px", "Food Map")),
fluidRow(
column(
4,
selectInput('City', 'Select City', unique(data$LocalAuthorityName), selectize = TRUE)
),
column(
4,
selectInput('BusinessType', 'Select Business Type', choices = NULL, selectize = TRUE)
),
column(
4,
selectInput('RatingValue', 'Select Rating Value', choices = NULL, selectize = TRUE)
),
),
fluidRow(column(width = 12, leafletOutput("mymap", "100%", height = "500"))),
fluidRow(column(width = 12, p(textOutput("desc")))),
fluidRow(a(style = "padding-left:25px;font-size:10;font-family:Lato;text-decoration:underline",
"Source: Food Standards Agency",
href = "https://www.food.gov.uk/uk-food-hygiene-rating-data-api"))
),
# Second tab content
tabItem(tabName = "plotdashboard",
fluidRow(h1(style = "font-family:Times New Roman;padding-left:16px", "Plots")),
fluidRow(h3(style = "font-family:Times New Roman;padding-left:16px",
"The share of Scheme Type")),
fluidRow(
fluidRow(
column(width = 12,
box(width = 12,
plotlyOutput("myplot2"))))),
tags$hr(style="border-color:black"),
fluidRow(h3(style = "font-family:Times New Roman;padding-left:16px",
"The share of New Rating Pending")),
fluidRow(
fluidRow(
column(width = 12,
box(width = 12,
plotlyOutput("myplot4"))))),
fluidRow(a(style = "padding-left:25px;font-size:10;font-family:Lato;text-decoration:underline",
"Source: Food Standards Agency",
href = "https://www.food.gov.uk/uk-food-hygiene-rating-data-api"))
),
# Third tab content
tabItem(tabName = "Hygieneplotswithcontrols",
fluidRow(h1(style = "font-family:Times New Roman;padding-left:16px", "Controls")),
fluidRow(h3(style = "font-family:Times New Roman;padding-left:16px",
"The Share of Rating Values in each city")),
fluidRow(
column(
width = 5,
selectInput('SchemeForPlot', 'Select Scheme',
c("Overall",
ifelse(unique(data$SchemeType) == "FHIS", "FHIS (Scotland)",
"FHRS (England, Wales and Northern Ireland)")),
selectize = TRUE)
),
column(
width = 5,
selectInput('CityForPlot', 'Select City',
choices = NULL,
selectize = TRUE)
),
fluidRow(
column(width = 12,
box(width = 12,
plotOutput("myplot1"))))),
tags$hr(style="border-color:black"),
fluidRow(h3(style = "font-family:Times New Roman;padding-left:16px",
"Business Type Share")),
fluidRow(
column(
width = 4,
selectInput('CityForPlot2', 'Select City',
c("Overall", unique(data$LocalAuthorityName)),
selectize = TRUE)
),
fluidRow(
column(width = 12,
box(width = 12,
plotOutput("myplot3"))))),
fluidRow(a(style = "padding-left:25px;font-size:10;font-family:Lato;text-decoration:underline",
"Source: Food Standards Agency",
href = "https://www.food.gov.uk/uk-food-hygiene-rating-data-api"))
),
# Last tab content
tabItem(tabName = "Hygienedata",
fluidRow(h1(style = "font-family:Times New Roman;padding-left:16px", "Dataset")),
fluidRow(
column(width = 12,
div(style = 'overflow-x: scroll', DT::dataTableOutput("mydata"),
tags$style(HTML(".dataTables_wrapper .dataTables_length {
float: left;}.dataTables_wrapper .dataTables_filter {
float: right; text-align: left;}"))
)
)
),
fluidRow(a(style = "padding-left:25px;font-size:10;font-family:Lato;text-decoration:underline",
"Source: Food Standards Agency",
href = "https://www.food.gov.uk/uk-food-hygiene-rating-data-api"))
)
)
)
)
server = function(input, output, session){
data_no_na_geo = data %>%
filter(!is.na(Longitude))
# Tab 1: select a city
observeEvent(input$City,{
updateSelectInput(session,'BusinessType',
choices=c("Select a business type", data_no_na_geo %>%
filter(LocalAuthorityName == input$City) %>%
distinct(BusinessType) %>%
arrange(BusinessType)))
})
# If the size of selection is 1, updateSelectInput will use the column name as the choice ("https://stackoverflow.com/questions/43098849/display-only-one-value-in-selectinput-in-r-shiny-app"), so I create another dataframe and change its column name to the selection to solve this problem
temp = reactive({
df = data_no_na_geo
if (nrow(df %>%
filter(LocalAuthorityName == input$City) %>%
filter(BusinessType == input$BusinessType) %>%
distinct(RatingValue)) == 1){
temp_name = df %>%
filter(LocalAuthorityName == input$City) %>%
filter(BusinessType == input$BusinessType) %>%
select(RatingValue) %>%
distinct(RatingValue) %>%
as.vector()
colnames(df) = c(colnames(df)[1:7], temp_name, colnames(df)[9:22])
return(df)
}
else{
return(df)
}
})
# Tab 1: Select a business type
observeEvent(input$BusinessType,{
updateSelectInput(session,'RatingValue',
choices=c("Select a rating value",
temp() %>%
filter(LocalAuthorityName == input$City &
BusinessType == input$BusinessType) %>%
select(colnames(temp())[8]) %>%
distinct() %>%
arrange() %>%
as.vector()
)
)
})
# Get data from a specified city and a particular type of business
filteredData = reactive({
df = data_no_na_geo %>%
filter(LocalAuthorityName == input$City) %>%
filter(BusinessType == input$BusinessType) %>%
filter(RatingValue == input$RatingValue)
return(df)
})
# Plot the whole map
output$mymap = renderLeaflet({
leaflet(
options = leafletOptions(zoomControl = FALSE)) %>%
htmlwidgets::onRender("function(el, x) {L.control.zoom({position: 'topright'}).addTo(this)}") %>%
addProviderTiles(providers$OpenStreetMap) %>%
setView(lng = -4.53067, lat = 54.22864, zoom = 5)
})
# Add markers to the map
observe({
icons <- awesomeIcons(
icon = 'ios-close',
iconColor = 'white',
library = 'ion',
markerColor = "red"
)
mymap_proxy <- leafletProxy("mymap", data = filteredData()) %>%
clearMarkers() %>%
addAwesomeMarkers(filteredData()$Longitude,
filteredData()$Latitude,
icon = icons,
popup = paste("<b>",filteredData()$BusinessName,"</b>", "<br>",
"<b>","Type:","</b>", filteredData()$BusinessType, "<br>",
"<b>","Food hygiene ratings:","</b>",filteredData()$RatingValue, "<br>",
"<b>","Rating Scheme:","</b>",filteredData()$SchemeType, "<br>",
"<b>","Postcode:","</b>", filteredData()$PostCode, "<br>",
"<b>","Address:","</b>", filteredData()$AddressLine) %>%
lapply(htmltools::HTML)) %>%
flyToBounds(lng1 = max(filteredData()$Longitude), lng2 = min(filteredData()$Longitude),
lat1 = max(filteredData()$Latitude), lat2 = min(filteredData()$Latitude))
})
## Tab 2: Plots
# Plot1 - Scheme Type share
output$myplot2 = renderPlotly({
a = ggplot(data = data, aes(x = SchemeType)) +
geom_bar() +
theme(axis.text.x = element_text(face="bold", color="#993333", size=14),
axis.text.y = element_text(face="bold", color="#993333", size=14),
axis.title.x = element_text(face="bold", color="black", size=14),
axis.title.y = element_text(face="bold", color="black", size=14))
ggplotly(a)
})
# Plot2 - New Rating Pending share
output$myplot4 = renderPlotly({
a = ggplot(data = data, aes(x = NewRatingPending)) +
geom_bar() +
theme(axis.text.x = element_text(face="bold", color="#993333", size=14),
axis.text.y = element_text(face="bold", color="#993333", size=14),
axis.title.x = element_text(face="bold", color="black", size=14),
axis.title.y = element_text(face="bold", color="black", size=14))
ggplotly(a)
})
## Tab 3: Controlled plot
# Plot1 - the bar chart for rating values in each city
# Select a scheme type
observeEvent(input$SchemeForPlot,{
updateSelectInput(session,'CityForPlot',
choices=c(data %>%
filter(SchemeType == substr(input$SchemeForPlot, start = 1, stop = 4)) %>%
arrange(LocalAuthorityName) %>%
distinct(LocalAuthorityName)))})
# Get data from a particular city and a specified type of scheme
filteredData2 = reactive({
df = data %>%
filter(SchemeType == substr(input$SchemeForPlot, start = 1, stop = 4)) %>%
filter(LocalAuthorityName == input$CityForPlot)
return(df)
})
# Plot the bar chart
output$myplot1 = renderPlot({
if (input$SchemeForPlot == "Overall"){
g1 = ggplot(data = data %>% filter(SchemeType == "FHIS"),
aes(x = RatingValue)) +
geom_bar(fill = "cadetblue1") +
geom_text(stat='count', aes(label=..count..), vjust=0.5) +
ggtitle("FHIS") +
theme(axis.text.x = element_text(face="bold", color="#993333", size=9),
axis.text.y = element_text(face="bold", color="#993333", size=12),
axis.title.x = element_text(face="bold", color="black", size=14),
axis.title.y = element_text(face="bold", color="black", size=14),
plot.title = element_text(size = 22, face = "bold"))
g2 = ggplot(data = data %>% filter(SchemeType == "FHRS"), aes(x = RatingValue)) +
geom_bar(fill = "cadetblue1") +
geom_text(stat='count', aes(label=..count..), vjust=0.5) +
ggtitle("FHRS") +
theme(axis.text.x = element_text(face="bold", color="#993333", size=9),
axis.text.y = element_text(face="bold", color="#993333", size=12),
axis.title.x = element_text(face="bold", color="black", size=14),
axis.title.y = element_text(face="bold", color="black", size=14),
plot.title = element_text(size = 22, face = "bold"))
ggpubr::ggarrange(g1, g2, nrow = 2)
}
else{
ggplot(data = filteredData2(), aes(x = RatingValue)) +
geom_bar(fill = "cadetblue1") +
geom_text(stat='count', aes(label=..count..), vjust=0.5) +
ggtitle(paste0("Rating Value distribution in ",
input$CityForPlot)) +
theme(axis.text.x = element_text(face="bold", color="#993333", size=12),
axis.text.y = element_text(face="bold", color="#993333", size=12),
axis.title.x = element_text(face="bold", color="black", size=14),
axis.title.y = element_text(face="bold", color="black", size=14),
plot.title = element_text(size = 18, face = "bold"))
}
})
# Plot2 - the pie chart for business type share
# Select a city
data_Pie_each_city = reactive({
df = data %>%
filter(LocalAuthorityName == input$CityForPlot2) %>%
group_by(BusinessType) %>%
summarise(Total = n()) %>%
ungroup()
return(df)
})
# Build a data frame to store the total amount for each business type
data_Pie_all = data %>%
group_by(BusinessType) %>%
summarise(Total = n()) %>%
ungroup()
# Plot a pie chart
output$myplot3 = renderPlot({
if (input$CityForPlot2 == "Overall"){
ggplot(data = data_Pie_all, aes(x = "", y = Total, fill = BusinessType)) +
geom_bar(stat = "identity", col = "black") +
coord_polar("y") +
ggtitle(paste0("Overall Business Type distribution")) +
# scale_fill_brewer("Blues") +
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(size=14, face="bold"),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10)
) +
theme(axis.text.x=element_blank()) +
geom_text(aes(label = paste0(round((Total/sum(Total))*100, 2), "%")),
size = 3, position = position_stack(vjust = 0.5))
}
else{
ggplot(data = data_Pie_each_city(), aes(x = "", y = Total, fill = BusinessType)) +
geom_bar(stat = "identity", col = "black") +
coord_polar("y") +
ggtitle(paste0("Business Type distribution in ", input$CityForPlot2)) +
# scale_fill_brewer("Blues") +
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(size=14, face="bold"),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10)
) +
theme(axis.text.x=element_blank()) +
geom_text(aes(label = paste0(round((Total/sum(Total))*100, 2), "%")),
size = 3, position = position_stack(vjust = 0.5))
}
})
# Display our data
output$mydata = DT::renderDataTable(
DT::datatable(data)
)
}
shinyApp(ui, server)
shinyApp(ui, server)
str(data)
shiny::runApp()
# Data preparation
data = readRDS("D:\\Warwick\\Courses\\Term 1\\Data Management\\Group Assignment\\PartD\\Demo\\final_result.rds")
data$Longitude = as.numeric(data$Longitude)
data$Latitude = as.numeric(data$Latitude)
# Change encoding to utf-8
Encoding(data$LocalAuthorityName) = "UTF-8"
Encoding(data$AddressLine) = "UTF-8"
# Data preparation
data = readRDS("D:\\Warwick\\Courses\\Term 1\\Data Management\\Group Assignment\\PartD\\Demo\\final_result.rds")
data$Longitude = as.numeric(data$Longitude)
data$Latitude = as.numeric(data$Latitude)
# Change encoding to utf-8
Encoding(data$LocalAuthorityName) = "UTF-8"
Encoding(data$AddressLine) = "UTF-8"
runApp()
runApp()
shiny::runApp()
shiny::runApp()
