temp = c("Product", 1960:2013)
data = data %>%
filter(...1 %in% temp)
# Convert ".." into NA
data[data == ".."] = NA
# Final adjustment (set names of columns and add two columns: country and flow )
data = data %>%
row_to_names(row_number = 1) %>%
rename(year = Product) %>%
mutate(country = Country, flow = Flow)
# Start gathering
structured_data = data %>%
gather(key = "product", value = "value", -c("country", "year", "flow")) %>%
arrange(year) %>%                             # Sort the result with year in ascending order
select(country, year, flow, product, value)   # Reorder the order of columns
return(structured_data)
}
FINAL_structural_data = data.frame() # Create an empty dataframe
all_country_directories = list.files("group_assignment/")
for (country in all_country_directories){
all_files = list.files(paste0("group_assignment/", country, "/"))
for (file in all_files){
file = paste0("group_assignment/", country, "/", file)
print(file)
FINAL_structural_data = rbind(FINAL_structural_data, DataFormation(file))
}
}
# Total number of records
nrow(FINAL_structural_data)
# Total number of records for each product across countries across years
FINAL_structural_data %>%
count(product) %>%
rename(`total number of records` = n) %>%
print()
knitr::opts_chunk$set(echo = TRUE)
structured_Albania_Imports = Albania_Imports %>%
gather(key = "product", value = "value", -c("country", "year", "flow")) %>%
arrange(year) %>%
select(country, year, flow, product, value)
Albania_Imports = read_excel("group_assignment/Albania/92686511-4ee6-405b-a5e2-57246e69e3f3.xlsx")
Albania_Imports[,2] = NULL
Flow = Albania_Imports$...3[2]
Country = Albania_Imports$...3[4]
temp = c("Product", 1960:2013)
Albania_Imports = Albania_Imports %>%
filter(...1 %in% temp)
Albania_Imports[Albania_Imports == ".."] = NA
# install.pachages("janitor")
library(janitor)
Albania_Imports = Albania_Imports %>%
row_to_names(row_number = 1) %>%
rename(year = Product) %>%
mutate(country = Country, flow = Flow)
structured_Albania_Imports = Albania_Imports %>%
gather(key = "product", value = "value", -c("country", "year", "flow")) %>%
arrange(year) %>%
select(country, year, flow, product, value)
View(structured_Albania_Imports)
head(structured_Albania_Imports,10)
structured_Albania_Imports = Albania_Imports %>%
gather(key = "product", value = "value", -c("country", "year", "flow")) %>%
arrange(year) %>%
select(country, year, flow, product, value) %>%
mutate(value = as.numeric(value))
head(structured_Albania_Imports,10)
structured_Albania_Imports = Albania_Imports %>%
gather(key = "product", value = "value", -c("country", "year", "flow")) %>%
arrange(year) %>%
select(country, year, flow, product, value)
structured_Albania_Imports$value = as.numeric(structured_Albania_Imports$value)
head(structured_Albania_Imports,10)
structured_Albania_Imports = Albania_Imports %>%
gather(key = "product", value = "value", -c("country", "year", "flow")) %>%
arrange(year) %>%
select(country, year, flow, product, value)
structured_Albania_Imports$value = as.integer(structured_Albania_Imports$value)
head(structured_Albania_Imports,10)
structured_Albania_Imports = Albania_Imports %>%
gather(key = "product", value = "value", -c("country", "year", "flow")) %>%
arrange(year) %>%
select(country, year, flow, product, value)
structured_Albania_Imports$value = as.numeric(structured_Albania_Imports$value)
head(structured_Albania_Imports,10)
DataFormation = function(file_path){
data = read_excel(file_path)
# Remove column 2 since its column name is a meaningless XML code and this column does not contain any value
data[,2] = NULL
# View(data), found that the name of flow is stored at the second row of column ...3
Flow = data$...3[2]
# View(data), found that the name of country is stored at the fourth row of column ...3
Country = data$...3[4]
# Filter rows not needed (only keep product row and year rows)
data = data %>%
filter(...1 %in% c("Product", 1960:2013))
# Convert ".." into NA
data[data == ".."] = NA
# Final adjustment (set names of columns and add two columns: country and flow )
data = data %>%
row_to_names(row_number = 1) %>%
rename(year = Product) %>%
mutate(country = Country, flow = Flow)
# Start gathering
structured_data = data %>%
gather(key = "product", value = "value", -c("country", "year", "flow")) %>%
arrange(year) %>%                             # Sort the result with year in ascending order
select(country, year, flow, product, value)  # Reorder the order of columns
structured_data$value = as.numeric(structured_data$value)
return(structured_data)
}
FINAL_structural_data = data.frame() # Create an empty dataframe
all_country_directories = list.files("group_assignment/")
for (country in all_country_directories){
all_files = list.files(paste0("group_assignment/", country, "/"))
for (file in all_files){
file = paste0("group_assignment/", country, "/", file)
FINAL_structural_data = rbind(FINAL_structural_data, DataFormation(file))
}
}
head(FINAL_structural_data, 20)
head(FINAL_structural_data %>% filter(country == "Germany", flow == "Production"), 20)
head(FINAL_structural_data %>% filter(country == "Germany", flow == "Production"), 10)
str(Albania_Imports)
?lapply
DataFormation = function(file_path){
data = read_excel(file_path)
# Remove column 2 since its column name is a meaningless XML code and this column does not contain any value
data[,2] = NULL
# View(data), found that the name of flow is stored at the second row of column ...3
Flow = data$...3[2]
# View(data), found that the name of country is stored at the fourth row of column ...3
Country = data$...3[4]
# Filter rows not needed (only keep product row and year rows)
data = data %>%
filter(...1 %in% c("Product", 1960:2013))
# Convert ".." into NA
data[data == ".."] = NA
# Final adjustment (set names of columns and add two columns: country and flow )
data = data %>%
row_to_names(row_number = 1) %>%
rename(year = Product) %>%
mutate(country = Country, flow = Flow)
# Start gathering
structured_data = data %>%
gather(key = "product", value = "value", -c("country", "year", "flow")) %>%
arrange(year) %>%                             # Sort the result with year in ascending order
select(country, year, flow, product, value)  # Reorder the order of columns
structured_data["year", "value"] = lapply(structured_data["year", "value"], as.numeric)
return(structured_data)
}
FINAL_structural_data = data.frame()  # Create an empty dataframe
all_country_directories = list.files("group_assignment/")
for (country in all_country_directories){
all_files = list.files(paste0("group_assignment/", country, "/"))
for (file in all_files){
file = paste0("group_assignment/", country, "/", file)
FINAL_structural_data = rbind(FINAL_structural_data, DataFormation(file))
}
}
DataFormation = function(file_path){
data = read_excel(file_path)
# Remove column 2 since its column name is a meaningless XML code and this column does not contain any value
data[,2] = NULL
# View(data), found that the name of flow is stored at the second row of column ...3
Flow = data$...3[2]
# View(data), found that the name of country is stored at the fourth row of column ...3
Country = data$...3[4]
# Filter rows not needed (only keep product row and year rows)
data = data %>%
filter(...1 %in% c("Product", 1960:2013))
# Convert ".." into NA
data[data == ".."] = NA
# Final adjustment (set names of columns and add two columns: country and flow )
data = data %>%
row_to_names(row_number = 1) %>%
rename(year = Product) %>%
mutate(country = Country, flow = Flow)
# Start gathering
structured_data = data %>%
gather(key = "product", value = "value", -c("country", "year", "flow")) %>%
arrange(year) %>%                             # Sort the result with year in ascending order
select(country, year, flow, product, value)  # Reorder the order of columns
structured_data["value"] = lapply(structured_data["value"], as.numeric)
return(structured_data)
}
FINAL_structural_data = data.frame()  # Create an empty dataframe
all_country_directories = list.files("group_assignment/")
for (country in all_country_directories){
all_files = list.files(paste0("group_assignment/", country, "/"))
for (file in all_files){
file = paste0("group_assignment/", country, "/", file)
FINAL_structural_data = rbind(FINAL_structural_data, DataFormation(file))
}
}
# Check if the structure is the same as the assignment description
head(FINAL_structural_data %>% filter(country == "Germany", flow == "Production"), 10)
DataFormation = function(file_path){
data = read_excel(file_path)
# Remove column 2 since its column name is a meaningless XML code and this column does not contain any value
data[,2] = NULL
# View(data), found that the name of flow is stored at the second row of column ...3
Flow = data$...3[2]
# View(data), found that the name of country is stored at the fourth row of column ...3
Country = data$...3[4]
# Filter rows not needed (only keep product row and year rows)
data = data %>%
filter(...1 %in% c("Product", 1960:2013))
# Convert ".." into NA
data[data == ".."] = NA
# Final adjustment (set names of columns and add two columns: country and flow )
data = data %>%
row_to_names(row_number = 1) %>%
rename(year = Product) %>%
mutate(country = Country, flow = Flow)
# Start gathering
structured_data = data %>%
gather(key = "product", value = "value", -c("country", "year", "flow")) %>%
arrange(year) %>%                             # Sort the result with year in ascending order
select(country, year, flow, product, value)  # Reorder the order of columns
structured_data["value", "year"] = lapply(structured_data["value", "year"], as.numeric)
return(structured_data)
}
FINAL_structural_data = data.frame()  # Create an empty dataframe
all_country_directories = list.files("group_assignment/")
for (country in all_country_directories){
all_files = list.files(paste0("group_assignment/", country, "/"))
for (file in all_files){
file = paste0("group_assignment/", country, "/", file)
FINAL_structural_data = rbind(FINAL_structural_data, DataFormation(file))
}
}
DataFormation = function(file_path){
data = read_excel(file_path)
# Remove column 2 since its column name is a meaningless XML code and this column does not contain any value
data[,2] = NULL
# View(data), found that the name of flow is stored at the second row of column ...3
Flow = data$...3[2]
# View(data), found that the name of country is stored at the fourth row of column ...3
Country = data$...3[4]
# Filter rows not needed (only keep product row and year rows)
data = data %>%
filter(...1 %in% c("Product", 1960:2013))
# Convert ".." into NA
data[data == ".."] = NA
# Final adjustment (set names of columns and add two columns: country and flow )
data = data %>%
row_to_names(row_number = 1) %>%
rename(year = Product) %>%
mutate(country = Country, flow = Flow)
# Start gathering
structured_data = data %>%
gather(key = "product", value = "value", -c("country", "year", "flow")) %>%
arrange(year) %>%                             # Sort the result with year in ascending order
select(country, year, flow, product, value)  # Reorder the order of columns
structured_data$value = as.numeric(structured_data$value)
return(structured_data)
}
FINAL_structural_data = data.frame()  # Create an empty dataframe
all_country_directories = list.files("group_assignment/")
for (country in all_country_directories){
all_files = list.files(paste0("group_assignment/", country, "/"))
for (file in all_files){
file = paste0("group_assignment/", country, "/", file)
FINAL_structural_data = rbind(FINAL_structural_data, DataFormation(file))
}
}
?readxl
?gather
library(tidyverse)
?gather
knitr::opts_chunk$set(echo = TRUE)
structured_Albania_Imports = Albania_Imports %>%
gather(key = "product", value = "value") %>%
arrange(year) %>%
select(country, year, flow, product, value)
structured_Albania_Imports = Albania_Imports %>%
gather(key = "product", value = "value", -c("country", "year")) %>%
arrange(year) %>%
select(country, year, flow, product, value)
structured_Albania_Imports = Albania_Imports %>%
gather(key = "product", value = "value", -c("country", "year", "flow")) %>%
arrange(year) %>%
select(country, year, flow, product, value)
structured_Albania_Imports$value = as.numeric(structured_Albania_Imports$value)
head(structured_Albania_Imports,10)
knitr::opts_chunk$set(echo = TRUE)
nrow(na.omit(FINAL_structural_data$value))
nrow(na.omit(FINAL_structural_data$value))
View(FINAL_structural_data)
length(na.omit(FINAL_structural_data$value))
nrow(FINAL_structural_data)
nrow(FINAL_structural_data)
# Check if the structure is the same as the assignment description
head(FINAL_structural_data %>% filter(country == "Germany", flow == "Production"), 10)
knitr::opts_chunk$set(echo = TRUE)
# install "tidyverse" first if you have not used it before
library(tidyverse)
library(readxl)
library(janitor) # Specify a row to be the column names
rm(list = ls()) # remove all existing variables
DataFormation = function(file_path){
data = read_excel(file_path)
# Remove column 2 since its column name is a meaningless XML code and this column does not contain any value
data[,2] = NULL
# View(data), found that the name of flow is stored at the second row of column ...3
Flow = data$...3[2]
# View(data), found that the name of country is stored at the fourth row of column ...3
Country = data$...3[4]
# Filter rows not needed (only keep product row and year rows)
data = data %>%
filter(...1 %in% c("Product", 1960:2013))
# Convert ".." into NA
data[data == ".."] = NA
# Final adjustment (set names of columns and add two columns: country and flow )
data = data %>%
row_to_names(row_number = 1) %>%
rename(year = Product) %>%
mutate(country = Country, flow = Flow)
# Start gathering
structured_data = data %>%
gather(key = "product", value = "value", -c("country", "year", "flow")) %>%
arrange(year) %>%                             # Sort the result with year in ascending order
select(country, year, flow, product, value)  # Reorder the order of columns
structured_data$value = as.numeric(structured_data$value)
return(structured_data)
}
FINAL_structural_data = data.frame()  # Create an empty dataframe
all_country_directories = list.files("group_assignment/")
for (country in all_country_directories){
all_files = list.files(paste0("group_assignment/", country, "/"))
for (file in all_files){
file = paste0("group_assignment/", country, "/", file)
FINAL_structural_data = rbind(FINAL_structural_data, DataFormation(file))
}
}
# Check if the structure is the same as the assignment description
head(FINAL_structural_data %>% filter(country == "Germany", flow == "Production"), 10)
nrow(FINAL_structural_data)
knitr::opts_chunk$set(echo = TRUE)
Albania_Imports = read_excel("group_assignment/Albania/92686511-4ee6-405b-a5e2-57246e69e3f3.xlsx")
# install "tidyverse" first if you have not used it before
library(tidyverse)
library(readxl)
# install "writexl" first if you have not used it before
# install.packages("writexl")
#library(writexl)
library(janitor) # for use a specific row to be column names
Albania_Imports = read_excel("group_assignment/Albania/92686511-4ee6-405b-a5e2-57246e69e3f3.xlsx")
View(Albania_Imports)
Albania_Imports[,2] = NULL
Albania_Imports = read_excel("group_assignment/Albania/92686511-4ee6-405b-a5e2-57246e69e3f3.xlsx")
Albania_Imports[,2] = NULL
Flow = Albania_Imports$...3[2]
Country = Albania_Imports$...3[4]
temp = c("Product", 1960:2013)
Albania_Imports = Albania_Imports %>%
filter(...1 %in% temp)
# install.pachages("janitor")
library(janitor)
Albania_Imports = Albania_Imports %>%
row_to_names(row_number = 1) %>%
rename(year = Product) %>%
mutate(country = Country, flow = Flow)
View(Albania_Imports)
knitr::opts_chunk$set(echo = TRUE)
Albania_Imports = read_excel("group_assignment/Albania/92686511-4ee6-405b-a5e2-57246e69e3f3.xlsx")
library(tidyverse)
Albania_Imports = read_excel("group_assignment/Albania/92686511-4ee6-405b-a5e2-57246e69e3f3.xlsx")
library(readxl)
Albania_Imports = read_excel("group_assignment/Albania/92686511-4ee6-405b-a5e2-57246e69e3f3.xlsx")
Albania_Imports[,2] = NULL
Flow = Albania_Imports$...3[2]
Country = Albania_Imports$...3[4]
Albania_Imports = read_excel("group_assignment/Albania/92686511-4ee6-405b-a5e2-57246e69e3f3.xlsx")
Albania_Imports[,2] = NULL
temp = c("Product", 1960:2013)
Albania_Imports = Albania_Imports %>%
filter(...1 %in% temp)
temp
Albania_Imports[Albania_Imports == ".."] = NA
Albania_Imports = Albania_Imports %>%
row_to_names(row_number = 1) %>%
rename(year = Product) %>%
mutate(country = Country, flow = Flow)
# install.pachages("janitor")
library(janitor)
Albania_Imports = Albania_Imports %>%
row_to_names(row_number = 1) %>%
rename(year = Product) %>%
mutate(country = Country, flow = Flow)
structured_Albania_Imports = Albania_Imports %>%
gather(key = "product", value = "value", -c("country", "year", "flow")) %>%
arrange(year) %>%
select(country, year, flow, product, value)
View(structured_Albania_Imports)
head(structured_Albania_Imports,10)
head(structured_Albania_Imports,10)
structured_Albania_Imports$value = as.numeric(structured_Albania_Imports$value)
head(structured_Albania_Imports,10)
knitr::opts_chunk$set(echo = TRUE)
# install.packages("tidyverse")
# install.packages("writexl")
library(tidyverse)
library(readxl)
library(janitor) # Specify a row to be the column names
#library(writexl)
rm(list = ls()) # remove all existing variables
DataFormation = function(file_path){
data = read_excel(file_path)
# Remove column 2 since it doesn't contain any values
data[,2] = NULL
# The name of the flow is stored in the second row of column ...3
Flow = data$...3[2]
# The name of the country is stored in the fourth row of column ...3
Country = data$...3[4]
# Filter rows to only keep product and year information
data = data %>%
filter(...1 %in% c("Product", 1960:2013))
# Replace ".." values with NA
data[data == ".."] = NA
# Rename the original columns and add two more columns - country and flow
data = data %>%
row_to_names(row_number = 1) %>%
rename(year = Product) %>%
mutate(country = Country, flow = Flow)
# Start gathering (pivoting data longer)
structured_data = data %>%
gather(key = "product",
value = "value",
-c("country", "year", "flow")) %>%
arrange(year) %>%
select(country, year, flow, product, value)   # Reorder the order of columns
structured_data$value = as.numeric(structured_data$value)
return(structured_data)
}
FINAL_structural_data = data.frame()  # Create an empty dataframe
all_country_directories = list.files("group_assignment/")
for (country in all_country_directories){
all_files = list.files(paste0("group_assignment/", country, "/"))
for (file in all_files){
file = paste0("group_assignment/", country, "/", file)
FINAL_structural_data = rbind(FINAL_structural_data, DataFormation(file))
}
}
# Check if the structure is the same as the assignment description
head(FINAL_structural_data %>% filter(country == "Germany", flow == "Production"), 10)
# Get total number of missing values for each country and each product across years
a = aggregate(value ~ country + product, data=FINAL_structural_data, function(x) {sum(is.na(x))}, na.action = NULL)
# Get total number of records for each country and each product across years
b = FINAL_structural_data %>%
group_by(country, product) %>%
summarise(n = n())
# Inner join the two data frame above to check if the number of records equals to the number of missing values under the same country and the same product
c = merge(a, b, by = c("product", "country"), all = T)
# If number of missing value equals to number of records, then all records for a particular product in this country are missing (across years and flows)
d = c[which(c$value == c$n), c("country", "product")]
# Remove records if there is no non-NA value across the whole period and flows for each product and each country
FINAL_DATA_NA_REMOVE = FINAL_structural_data
for (i in 1:nrow(d)){
FINAL_DATA_NA_REMOVE = FINAL_DATA_NA_REMOVE %>%
filter(country != d[i,1] | product != d[i,2])
}
# Convert the rest of missing values into 0
FINAL_DATA_NA_REMOVE[is.na(FINAL_DATA_NA_REMOVE)] = 0
summarise(FINAL_DATA_NA_REMOVE, Dataset = "Extended Energy Balances", TotalNumberOfRows = n())
FINAL_DATA_NA_REMOVE %>%
group_by(Product = product) %>%
summarise(NumberOfRows = n())
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse) # tidyverse provides data manipulation functions and pipeline
library(readxl) # readxl allows us to read Excel file
library(janitor) # janitor Specify a row to be the column names
#library(writexl)
rm(list = ls()) # remove all existing variables
DataFormation = function(file_path){
data = read_excel(file_path)
# Remove column 2 since it doesn't contain any values
data[,2] = NULL
# The name of the flow is stored in the second row of column ...3
Flow = data$...3[2]
# The name of the country is stored in the fourth row of column ...3
Country = data$...3[4]
# Filter rows to only keep product and year information
data = data %>%
filter(...1 %in% c("Product", 1960:2013))
# Replace ".." values with NA
data[data == ".."] = NA
# Rename the original columns and add two more columns - country and flow
data = data %>%
row_to_names(row_number = 1) %>%
rename(year = Product) %>%
mutate(country = Country, flow = Flow)
# Start gathering (pivoting data longer)
structured_data = data %>%
gather(key = "product",
value = "value",
-c("country", "year", "flow")) %>%
arrange(year) %>%
select(country, year, flow, product, value)   # Reorder the order of columns
structured_data$value = as.numeric(structured_data$value)
return(structured_data)
}
FINAL_structural_data = data.frame()  # Create an empty dataframe
all_country_directories = list.files("group_assignment/")
for (country in all_country_directories){
all_files = list.files(paste0("group_assignment/", country, "/"))
for (file in all_files){
file = paste0("group_assignment/", country, "/", file)
FINAL_structural_data = rbind(FINAL_structural_data, DataFormation(file))
}
}
# Check if the structure is the same as the assignment description
head(FINAL_structural_data %>% filter(country == "Germany", flow == "Production"), 10)
